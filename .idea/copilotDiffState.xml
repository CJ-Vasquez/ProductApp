<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="updatedContent" value="# Archivos de Android Studio&#10;*.iml&#10;.gradle&#10;/local.properties&#10;/.idea/caches&#10;/.idea/libraries&#10;/.idea/modules.xml&#10;/.idea/workspace.xml&#10;/.idea/navEditor.xml&#10;/.idea/assetWizardSettings.xml&#10;.DS_Store&#10;/build&#10;/captures&#10;.externalNativeBuild&#10;.cxx&#10;local.properties&#10;&#10;# Archivos de compilación&#10;/app/build/&#10;/gradle/wrapper/&#10;&#10;# Archivos temporales&#10;*.tmp&#10;*.temp&#10;*.log&#10;&#10;# Archivos de respaldo&#10;*.bak&#10;*~&#10;&#10;# Archivos del sistema&#10;Thumbs.db&#10;.DS_Store&#10;&#10;# Archivos de configuración específicos del entorno&#10;gradle.properties&#10;local.properties" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/GUIA_GIT_COMPLETA.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/GUIA_GIT_COMPLETA.md" />
              <option name="updatedContent" value="═══════════════════════════════════════════════════════════════════&#10; GUÍA COMPLETA: SUBIR PROYECTO PRODUCTAPP A GIT&#10;═══════════════════════════════════════════════════════════════════&#10;&#10; OBJETIVO:&#10;Subir tu proyecto ProductApp a un repositorio Git (GitHub, GitLab, etc.)&#10;para crear un portafolio profesional y respaldar tu código.&#10;&#10;═══════════════════════════════════════════════════════════════════&#10;&#10; OPCIÓN 1: SCRIPT AUTOMÁTICO (RECOMENDADO)&#10;&#10;Ejecuta el script desde la raíz del proyecto:&#10;```&#10;SUBIR_A_GIT.bat&#10;```&#10;&#10;El script hará todo automáticamente:&#10;✅ Verificar instalación de Git&#10;✅ Configurar usuario Git&#10;✅ Inicializar repositorio&#10;✅ Crear .gitignore apropiado&#10;✅ Hacer commit inicial&#10;✅ Conectar con repositorio remoto&#10;✅ Subir proyecto completo&#10;&#10;═══════════════════════════════════════════════════════════════════&#10;&#10;️ OPCIÓN 2: COMANDOS MANUALES&#10;&#10;Si prefieres hacerlo paso a paso:&#10;&#10;### PASO 1: Verificar Git instalado&#10;```bash&#10;git --version&#10;```&#10;Si no está instalado: https://git-scm.com/downloads&#10;&#10;### PASO 2: Configurar Git (primera vez solamente)&#10;```bash&#10;git config --global user.name &quot;Tu Nombre&quot;&#10;git config --global user.email &quot;tu.email@gmail.com&quot;&#10;```&#10;&#10;### PASO 3: Inicializar repositorio local&#10;```bash&#10;cd &quot;D:\5to CICLO CIBERTEC\4693 DESARROLLO DE APLICACIONES MOVILES I\ProyectoAPP_1&quot;&#10;git init&#10;```&#10;&#10;### PASO 4: Agregar archivos&#10;```bash&#10;git add .&#10;```&#10;&#10;### PASO 5: Commit inicial&#10;```bash&#10;git commit -m &quot;Initial commit: ProductApp - Aplicación completa de gestión de productos&quot;&#10;```&#10;&#10;### PASO 6: Crear repositorio remoto&#10;Ve a tu plataforma preferida:&#10;&#10; **GITHUB**: https://github.com/new&#10;   • Nombre: &quot;ProductApp&quot; &#10;   • Descripción: &quot;Aplicación Android de gestión de productos con carrito de compras&quot;&#10;   • Público (recomendado para portafolio)&#10;   • NO inicializar con README&#10;&#10; **GITLAB**: https://gitlab.com/projects/new&#10;   • Mismo proceso que GitHub&#10;&#10; **BITBUCKET**: https://bitbucket.org/repo/create&#10;   • Mismo proceso que GitHub&#10;&#10;### PASO 7: Conectar repositorio local con remoto&#10;```bash&#10;git remote add origin https://github.com/tu-usuario/ProductApp.git&#10;git branch -M main&#10;git push -u origin main&#10;```&#10;&#10;═══════════════════════════════════════════════════════════════════&#10;&#10; ARCHIVOS PREPARADOS PARA GIT:&#10;&#10;✅ **.gitignore** - Configurado para Android&#10;   • Excluye archivos de build&#10;   • Excluye configuraciones locales&#10;   • Excluye cache de Android Studio&#10;&#10;✅ **README.md** - Documentación profesional&#10;   • Descripción completa del proyecto&#10;   • Tecnologías implementadas&#10;   • Instrucciones de instalación&#10;   • Estructura del código&#10;   • Funcionalidades detalladas&#10;&#10;✅ **Código fuente limpio**&#10;   • Sin archivos temporales&#10;   • Sin rastros de desarrollo&#10;   • Solo código esencial y funcional&#10;&#10;═══════════════════════════════════════════════════════════════════&#10;&#10; RECOMENDACIONES PARA EL REPOSITORIO:&#10;&#10;### **Configuración del repositorio:**&#10; **Nombre**: ProductApp&#10; **Descripción**: &quot;Aplicación Android de gestión de productos con carrito de compras desarrollada en Kotlin&quot;&#10; **Topics/Tags**: android, kotlin, mobile-app, room-database, retrofit, material-design, mvvm, cibertec&#10; **Visibilidad**: Público (para portafolio profesional)&#10;&#10;### **Después de subir:**&#10;✅ Verificar que todos los archivos estén subidos&#10;✅ Probar clonar el repositorio en otra carpeta&#10;✅ Agregar una imagen/screenshot de la app al README&#10;✅ Considerar agregar releases/tags para versiones&#10;&#10;═══════════════════════════════════════════════════════════════════&#10;&#10; COMANDOS ÚTILES PARA EL FUTURO:&#10;&#10;```bash&#10;# Ver estado del repositorio&#10;git status&#10;&#10;# Agregar cambios&#10;git add .&#10;&#10;# Guardar cambios con mensaje&#10;git commit -m &quot;Descripción del cambio&quot;&#10;&#10;# Subir cambios al repositorio&#10;git push&#10;&#10;# Descargar cambios del repositorio&#10;git pull&#10;&#10;# Ver historial de commits&#10;git log --oneline&#10;&#10;# Crear nueva rama&#10;git checkout -b nueva-funcionalidad&#10;&#10;# Cambiar entre ramas&#10;git checkout main&#10;```&#10;&#10;═══════════════════════════════════════════════════════════════════&#10;&#10; BENEFICIOS PARA TU PORTAFOLIO:&#10;&#10;✅ **Demostrar competencias técnicas**&#10;   • Desarrollo Android nativo&#10;   • Arquitectura MVVM&#10;   • Integración con APIs&#10;   • Base de datos local&#10;&#10;✅ **Mostrar buenas prácticas**&#10;   • Código limpio y documentado&#10;   • Estructura organizada&#10;   • Control de versiones&#10;   • README profesional&#10;&#10;✅ **Facilitar evaluación académica**&#10;   • Acceso fácil para profesores&#10;   • Historial de desarrollo&#10;   • Documentación completa&#10;   • Proyecto funcional&#10;&#10;═══════════════════════════════════════════════════════════════════&#10;&#10; RESOLUCIÓN DE PROBLEMAS COMUNES:&#10;&#10;❌ **&quot;Git no se reconoce como comando&quot;**&#10;   ➤ Instalar Git desde https://git-scm.com/downloads&#10;   ➤ Reiniciar terminal después de instalar&#10;&#10;❌ **&quot;Permission denied&quot;**&#10;   ➤ Configurar autenticación SSH o token personal&#10;   ➤ Usar HTTPS si es más fácil&#10;&#10;❌ **&quot;Repository not found&quot;**&#10;   ➤ Verificar que la URL del repositorio sea correcta&#10;   ➤ Confirmar permisos de acceso&#10;&#10;❌ **&quot;Updates were rejected&quot;**&#10;   ➤ Hacer git pull primero&#10;   ➤ Resolver conflictos si existen&#10;   ➤ Luego hacer git push&#10;&#10;═══════════════════════════════════════════════════════════════════&#10;&#10; RESULTADO FINAL:&#10;&#10;Una vez completado, tendrás:&#10;• ✅ Proyecto ProductApp en repositorio Git público&#10;• ✅ URL compartible para profesores y empleadores&#10;• ✅ Respaldo seguro de tu código&#10;• ✅ Historial de cambios documentado&#10;• ✅ Portafolio profesional mejorado&#10;&#10;═══════════════════════════════════════════════════════════════════" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PREPARAR_GIT.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PREPARAR_GIT.bat" />
              <option name="updatedContent" value="@echo off&#10;color 0C&#10;echo.&#10;echo ═══════════════════════════════════════════════════════════════════&#10;echo    ⚡ PREPARACION RAPIDA PARA GIT - SOLO LO ESENCIAL&#10;echo ═══════════════════════════════════════════════════════════════════&#10;echo.&#10;echo Este script prepara tu proyecto ProductApp para subirlo a Git&#10;echo de la manera más rápida y sencilla posible.&#10;echo.&#10;&#10;echo [1/4] Verificando Git...&#10;git --version &gt;nul 2&gt;&amp;1&#10;if %ERRORLEVEL% NEQ 0 (&#10;    echo ❌ Git no está instalado&#10;    echo.&#10;    echo ACCION REQUERIDA:&#10;    echo 1. Ve a: https://git-scm.com/downloads&#10;    echo 2. Descarga e instala Git para Windows&#10;    echo 3. Vuelve a ejecutar este script&#10;    echo.&#10;    pause&#10;    exit /b 1&#10;) else (&#10;    echo ✅ Git instalado correctamente&#10;)&#10;&#10;echo.&#10;echo [2/4] Inicializando repositorio...&#10;if not exist &quot;.git&quot; (&#10;    git init&#10;    echo ✅ Repositorio inicializado&#10;) else (&#10;    echo ✅ Repositorio ya existe&#10;)&#10;&#10;echo.&#10;echo [3/4] Agregando archivos...&#10;git add .&#10;echo ✅ Archivos agregados&#10;&#10;echo.&#10;echo [4/4] Commit inicial...&#10;git commit -m &quot;ProductApp: Aplicacion completa de gestion de productos con carrito y checkout&quot; &gt;nul 2&gt;&amp;1&#10;if %ERRORLEVEL% EQU 0 (&#10;    echo ✅ Commit inicial completado&#10;) else (&#10;    echo ✅ Proyecto ya está actualizado&#10;)&#10;&#10;echo.&#10;echo ═══════════════════════════════════════════════════════════════════&#10;echo     PROYECTO LISTO PARA SUBIR A GIT!&#10;echo ═══════════════════════════════════════════════════════════════════&#10;echo.&#10;echo SIGUIENTES PASOS:&#10;echo.&#10;echo 1. CREAR REPOSITORIO EN GITHUB:&#10;echo    • Ve a: https://github.com/new&#10;echo    • Nombre: ProductApp&#10;echo    • Descripción: Aplicación Android de gestión de productos&#10;echo    • Visibilidad: Público (recomendado)&#10;echo    • NO marcar &quot;Initialize with README&quot;&#10;echo    • Click &quot;Create repository&quot;&#10;echo.&#10;echo 2. COPIA ESTOS COMANDOS Y EJECUTALOS:&#10;echo.&#10;echo    git remote add origin https://github.com/TU-USUARIO/ProductApp.git&#10;echo    git branch -M main  &#10;echo    git push -u origin main&#10;echo.&#10;echo    (Reemplaza TU-USUARIO con tu username de GitHub)&#10;echo.&#10;echo ═══════════════════════════════════════════════════════════════════&#10;echo.&#10;echo ARCHIVOS INCLUIDOS EN EL REPOSITORIO:&#10;echo • ✅ Código fuente completo (MainActivity, Activities, ViewModels)&#10;echo • ✅ Base de datos Room configurada&#10;echo • ✅ Integración Retrofit con FakeStore API&#10;echo • ✅ Sistema de carrito de compras&#10;echo • ✅ Proceso de checkout completo&#10;echo • ✅ README.md profesional&#10;echo • ✅ .gitignore configurado para Android&#10;echo.&#10;echo  Tu proyecto está listo para impresionar!&#10;echo.&#10;pause" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# ProductApp - Aplicación de Gestión de Productos&#10;&#10;##  Descripción del Proyecto&#10;&#10;**ProductApp** es una aplicación móvil Android desarrollada en **Kotlin** que permite gestionar productos de manera eficiente con sincronización a la **FakeStore API**. La aplicación cuenta con un sistema completo de carrito de compras, proceso de checkout y generación de recibos.&#10;&#10;## ✨ Funcionalidades Principales&#10;&#10;###  **Gestión de Productos**&#10;- ✅ **Agregar productos** con formulario completo&#10;- ✅ **Listar productos** con interfaz moderna&#10;- ✅ **Ver detalles** de productos individuales&#10;- ✅ **Editar y eliminar** productos existentes&#10;- ✅ **Sincronización automática** con FakeStore API&#10;&#10;###  **Sistema de Carrito de Compras**&#10;- ✅ **Agregar productos** al carrito con cantidades&#10;- ✅ **Modificar cantidades** con botones +/-&#10;- ✅ **Eliminar productos** individuales&#10;- ✅ **Calcular totales** con IGV (18%)&#10;- ✅ **Limpiar carrito** completo&#10;&#10;###  **Proceso de Checkout Completo**&#10;- ✅ **Formulario de cliente** (nombre, email, teléfono)&#10;- ✅ **Información de envío** (dirección completa)&#10;- ✅ **Métodos de pago** (efectivo, tarjeta, transferencia)&#10;- ✅ **Resumen de pedido** detallado&#10;- ✅ **Generación de recibo** con número de orden&#10;&#10;## ️ Arquitectura Técnica&#10;&#10;### **Patrón de Diseño**&#10;- **MVVM (Model-View-ViewModel)** con **LiveData**&#10;- **Repository Pattern** para abstracción de datos&#10;- **Separación de responsabilidades** por capas&#10;&#10;### **Base de Datos Local**&#10;- **Room Database** con entidades, DAOs y migraciones&#10;- **Persistencia offline** completa&#10;- **Consultas reactivas** con LiveData&#10;&#10;### **Integración API REST**&#10;- **Retrofit** para comunicación HTTP&#10;- **FakeStore API** como backend&#10;- **Sincronización bidireccional** (local ↔ remoto)&#10;- **Manejo de errores** robusto&#10;&#10;### **Interfaz de Usuario**&#10;- **Material Design 3** con colores pasteles&#10;- **ViewBinding** para acceso a vistas&#10;- **CardViews** con elevación y esquinas redondeadas&#10;- **Gradientes suaves** en backgrounds&#10;- **Navegación intuitiva** con toolbar personalizada&#10;&#10;## ️ Tecnologías Implementadas&#10;&#10;| Categoría | Tecnología | Versión |&#10;|-----------|------------|---------|&#10;| **Lenguaje** | Kotlin | 2.0.21 |&#10;| **UI Framework** | Material Design 3 | 1.11.0 |&#10;| **Base de Datos** | Room | 2.6.1 |&#10;| **Networking** | Retrofit + Gson | 2.9.0 |&#10;| **Async** | Coroutines | 1.7.3 |&#10;| **Arquitectura** | ViewModel + LiveData | 2.7.0 |&#10;| **Imágenes** | Glide | 4.16.0 |&#10;| **Build** | Gradle KTS | 8.13 |&#10;&#10;##  Estructura del Proyecto&#10;&#10;```&#10;app/src/main/&#10;├── java/com/cibertec/productapp/&#10;│   ├── MainActivity.kt                    # Pantalla principal&#10;│   ├── data/&#10;│   │   ├── local/&#10;│   │   │   ├── entity/ProductEntity.kt    # Entidad Room&#10;│   │   │   ├── dao/ProductDao.kt          # Data Access Object&#10;│   │   │   └── database/AppDatabase.kt    # Base de datos Room&#10;│   │   ├── remote/&#10;│   │   │   ├── api/FakeStoreApi.kt        # Interface API&#10;│   │   │   ├── model/ProductResponse.kt   # Modelos de respuesta&#10;│   │   │   └── RetrofitInstance.kt        # Configuración Retrofit&#10;│   │   └── repository/ProductRepository.kt # Patrón Repository&#10;│   └── ui/&#10;│       ├── activities/                    # Actividades principales&#10;│       │   ├── AddProductActivity.kt      # Agregar/Editar productos&#10;│       │   ├── ProductListActivity.kt     # Lista de productos&#10;│       │   ├── ProductDetailActivity.kt   # Detalle de producto&#10;│       │   ├── CartActivity.kt            # Carrito de compras&#10;│       │   ├── CheckoutActivity.kt        # Proceso de checkout&#10;│       │   └── OrderReceiptActivity.kt    # Recibo de orden&#10;│       ├── adapter/ProductAdapter.kt      # Adapter para RecyclerView&#10;│       └── viewmodel/                     # ViewModels MVVM&#10;│           ├── ProductViewModel.kt        # ViewModel de productos&#10;│           └── CartViewModel.kt           # ViewModel del carrito&#10;├── res/&#10;│   ├── layout/                           # Layouts XML&#10;│   ├── values/                           # Strings, colores, temas&#10;│   ├── drawable/                         # Iconos y fondos&#10;│   └── menu/                            # Menús de navegación&#10;└── AndroidManifest.xml                   # Configuración de la app&#10;```&#10;&#10;##  Diseño Visual&#10;&#10;### **Paleta de Colores**&#10;- **Primarios**: Tonos pasteles suaves (#E3F2FD, #F3E5F5)&#10;- **Secundarios**: Acentos complementarios (#FFF3E0, #E8F5E8)&#10;- **Textos**: Alto contraste para legibilidad&#10;- **Gradientes**: Transiciones suaves en backgrounds&#10;&#10;### **Componentes UI**&#10;- **Cards**: Esquinas redondeadas (20dp) con elevación sutil&#10;- **Botones**: Material Design con iconos descriptivos&#10;- **TextFields**: Outlined style con validación visual&#10;- **RecyclerView**: Lista fluida con animaciones&#10;&#10;## ⚙️ Configuración de Desarrollo&#10;&#10;### **Requisitos del Sistema**&#10;- **Android Studio**: Arctic Fox o superior&#10;- **Gradle**: 8.13+&#10;- **Kotlin**: 2.0.21&#10;- **Android SDK**: API 24-34&#10;- **JDK**: 11 o superior&#10;&#10;### **Dependencias Principales**&#10;```kotlin&#10;// Base de datos&#10;implementation(&quot;androidx.room:room-runtime:2.6.1&quot;)&#10;implementation(&quot;androidx.room:room-ktx:2.6.1&quot;)&#10;kapt(&quot;androidx.room:room-compiler:2.6.1&quot;)&#10;&#10;// Networking&#10;implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;&#10;// UI y Arquitectura&#10;implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0&quot;)&#10;implementation(&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.7.0&quot;)&#10;implementation(&quot;com.google.android.material:material:1.11.0&quot;)&#10;&#10;// Imágenes&#10;implementation(&quot;com.github.bumptech.glide:glide:4.16.0&quot;)&#10;&#10;// Async&#10;implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;```&#10;&#10;##  Instalación y Uso&#10;&#10;### **1. Clonar/Descargar Proyecto**&#10;```bash&#10;# Proyecto listo para importar en Android Studio&#10;```&#10;&#10;### **2. Configuración**&#10;- Abrir en **Android Studio**&#10;- Sincronizar **Gradle**&#10;- Configurar **dispositivo/emulador**&#10;&#10;### **3. Ejecutar**&#10;```bash&#10;# Compilar y ejecutar&#10;./gradlew assembleDebug&#10;./gradlew installDebug&#10;```&#10;&#10;### **4. Funcionalidades Disponibles**&#10;1. **Pantalla Principal**: Navegación a todas las secciones&#10;2. **Agregar Producto**: Formulario completo con validaciones&#10;3. **Lista de Productos**: Visualización con imágenes y sincronización&#10;4. **Carrito**: Gestión completa de productos seleccionados&#10;5. **Checkout**: Proceso de compra paso a paso&#10;6. **Recibo**: Confirmación detallada de la orden&#10;&#10;##  Integración con API&#10;&#10;### **FakeStore API**&#10;- **Base URL**: `https://fakestoreapi.com/`&#10;- **Endpoints utilizados**:&#10;  - `GET /products` - Obtener todos los productos&#10;  - `GET /products/{id}` - Obtener producto específico&#10;  - `POST /products` - Crear nuevo producto&#10;  - `PUT /products/{id}` - Actualizar producto&#10;  - `DELETE /products/{id}` - Eliminar producto&#10;&#10;### **Sincronización**&#10;- **Automática** al abrir la lista de productos&#10;- **Manual** mediante botón de sincronización&#10;- **Offline-first** con Room como fuente de verdad&#10;- **Manejo de errores** con feedback al usuario&#10;&#10;##  Características de Calidad&#10;&#10;### **Rendimiento**&#10;- ✅ **Operaciones asíncronas** con Coroutines&#10;- ✅ **Carga de imágenes optimizada** con Glide&#10;- ✅ **Consultas eficientes** con Room&#10;- ✅ **Recycling de vistas** en listas&#10;&#10;### **Usabilidad**&#10;- ✅ **Interfaz intuitiva** y consistente&#10;- ✅ **Feedback inmediato** con Toast/Snackbar&#10;- ✅ **Navegación fluida** entre pantallas&#10;- ✅ **Validación de formularios** en tiempo real&#10;&#10;### **Robustez**&#10;- ✅ **Manejo de errores** completo&#10;- ✅ **Persistencia offline** confiable&#10;- ✅ **Validación de datos** en múltiples capas&#10;- ✅ **Recuperación automática** de errores de red&#10;&#10;###  **Proyecto Cibertec**&#10;" />
              <option name="updatedContent" value="# ProductApp - Aplicación de Gestión de Productos&#10;&#10;##  Descripción del Proyecto&#10;&#10;**ProductApp** es una aplicación móvil Android desarrollada en **Kotlin** que permite gestionar productos de manera eficiente con sincronización a la **FakeStore API**. La aplicación cuenta con un sistema completo de carrito de compras, proceso de checkout y generación de recibos.&#10;&#10;## ✨ Funcionalidades Principales&#10;&#10;###  **Gestión de Productos**&#10;- ✅ **Agregar productos** con formulario completo&#10;- ✅ **Listar productos** con interfaz moderna&#10;- ✅ **Ver detalles** de productos individuales&#10;- ✅ **Editar y eliminar** productos existentes&#10;- ✅ **Sincronización automática** con FakeStore API&#10;&#10;###  **Sistema de Carrito de Compras**&#10;- ✅ **Agregar productos** al carrito con cantidades&#10;- ✅ **Modificar cantidades** con botones +/-&#10;- ✅ **Eliminar productos** individuales&#10;- ✅ **Calcular totales** con IGV (18%)&#10;- ✅ **Limpiar carrito** completo&#10;&#10;###  **Proceso de Checkout Completo**&#10;- ✅ **Formulario de cliente** (nombre, email, teléfono)&#10;- ✅ **Información de envío** (dirección completa)&#10;- ✅ **Métodos de pago** (efectivo, tarjeta, transferencia)&#10;- ✅ **Resumen de pedido** detallado&#10;- ✅ **Generación de recibo** con número de orden&#10;&#10;## ️ Arquitectura Técnica&#10;&#10;### **Patrón de Diseño**&#10;- **MVVM (Model-View-ViewModel)** con **LiveData**&#10;- **Repository Pattern** para abstracción de datos&#10;- **Separación de responsabilidades** por capas&#10;&#10;### **Base de Datos Local**&#10;- **Room Database** con entidades, DAOs y migraciones&#10;- **Persistencia offline** completa&#10;- **Consultas reactivas** con LiveData&#10;&#10;### **Integración API REST**&#10;- **Retrofit** para comunicación HTTP&#10;- **FakeStore API** como backend&#10;- **Sincronización bidireccional** (local ↔ remoto)&#10;- **Manejo de errores** robusto&#10;&#10;### **Interfaz de Usuario**&#10;- **Material Design 3** con colores pasteles&#10;- **ViewBinding** para acceso a vistas&#10;- **CardViews** con elevación y esquinas redondeadas&#10;- **Gradientes suaves** en backgrounds&#10;- **Navegación intuitiva** con toolbar personalizada&#10;&#10;## ️ Tecnologías Implementadas&#10;&#10;| Categoría | Tecnología | Versión |&#10;|-----------|------------|---------|&#10;| **Lenguaje** | Kotlin | 2.0.21 |&#10;| **UI Framework** | Material Design 3 | 1.11.0 |&#10;| **Base de Datos** | Room | 2.6.1 |&#10;| **Networking** | Retrofit + Gson | 2.9.0 |&#10;| **Async** | Coroutines | 1.7.3 |&#10;| **Arquitectura** | ViewModel + LiveData | 2.7.0 |&#10;| **Imágenes** | Glide | 4.16.0 |&#10;| **Build** | Gradle KTS | 8.13 |&#10;&#10;##  Estructura del Proyecto&#10;&#10;```&#10;app/src/main/&#10;├── java/com/cibertec/productapp/&#10;│   ├── MainActivity.kt                    # Pantalla principal&#10;│   ├── data/&#10;│   │   ├── local/&#10;│   │   │   ├── entity/ProductEntity.kt    # Entidad Room&#10;│   │   │   ├── dao/ProductDao.kt          # Data Access Object&#10;│   │   │   └── database/AppDatabase.kt    # Base de datos Room&#10;│   │   ├── remote/&#10;│   │   │   ├── api/FakeStoreApi.kt        # Interface API&#10;│   │   │   ├── model/ProductResponse.kt   # Modelos de respuesta&#10;│   │   │   └── RetrofitInstance.kt        # Configuración Retrofit&#10;│   │   └── repository/ProductRepository.kt # Patrón Repository&#10;│   └── ui/&#10;│       ├── activities/                    # Actividades principales&#10;│       │   ├── AddProductActivity.kt      # Agregar/Editar productos&#10;│       │   ├── ProductListActivity.kt     # Lista de productos&#10;│       │   ├── ProductDetailActivity.kt   # Detalle de producto&#10;│       │   ├── CartActivity.kt            # Carrito de compras&#10;│       │   ├── CheckoutActivity.kt        # Proceso de checkout&#10;│       │   └── OrderReceiptActivity.kt    # Recibo de orden&#10;│       ├── adapter/ProductAdapter.kt      # Adapter para RecyclerView&#10;│       └── viewmodel/                     # ViewModels MVVM&#10;│           ├── ProductViewModel.kt        # ViewModel de productos&#10;│           └── CartViewModel.kt           # ViewModel del carrito&#10;├── res/&#10;│   ├── layout/                           # Layouts XML&#10;│   ├── values/                           # Strings, colores, temas&#10;│   ├── drawable/                         # Iconos y fondos&#10;│   └── menu/                            # Menús de navegación&#10;└── AndroidManifest.xml                   # Configuración de la app&#10;```&#10;&#10;##  Diseño Visual&#10;&#10;### **Paleta de Colores**&#10;- **Primarios**: Tonos pasteles suaves (#E3F2FD, #F3E5F5)&#10;- **Secundarios**: Acentos complementarios (#FFF3E0, #E8F5E8)&#10;- **Textos**: Alto contraste para legibilidad&#10;- **Gradientes**: Transiciones suaves en backgrounds&#10;&#10;### **Componentes UI**&#10;- **Cards**: Esquinas redondeadas (20dp) con elevación sutil&#10;- **Botones**: Material Design con iconos descriptivos&#10;- **TextFields**: Outlined style con validación visual&#10;- **RecyclerView**: Lista fluida con animaciones&#10;&#10;## ⚙️ Configuración de Desarrollo&#10;&#10;### **Requisitos del Sistema**&#10;- **Android Studio**: Arctic Fox o superior&#10;- **Gradle**: 8.13+&#10;- **Kotlin**: 2.0.21&#10;- **Android SDK**: API 24-34&#10;- **JDK**: 11 o superior&#10;&#10;### **Dependencias Principales**&#10;```kotlin&#10;// Base de datos&#10;implementation(&quot;androidx.room:room-runtime:2.6.1&quot;)&#10;implementation(&quot;androidx.room:room-ktx:2.6.1&quot;)&#10;kapt(&quot;androidx.room:room-compiler:2.6.1&quot;)&#10;&#10;// Networking&#10;implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;&#10;// UI y Arquitectura&#10;implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0&quot;)&#10;implementation(&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.7.0&quot;)&#10;implementation(&quot;com.google.android.material:material:1.11.0&quot;)&#10;&#10;// Imágenes&#10;implementation(&quot;com.github.bumptech.glide:glide:4.16.0&quot;)&#10;&#10;// Async&#10;implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;```&#10;&#10;##  Instalación y Uso&#10;&#10;### **1. Clonar/Descargar Proyecto**&#10;```bash&#10;# Proyecto listo para importar en Android Studio&#10;```&#10;&#10;### **2. Configuración**&#10;- Abrir en **Android Studio**&#10;- Sincronizar **Gradle**&#10;- Configurar **dispositivo/emulador**&#10;&#10;### **3. Ejecutar**&#10;```bash&#10;# Compilar y ejecutar&#10;./gradlew assembleDebug&#10;./gradlew installDebug&#10;```&#10;&#10;### **4. Funcionalidades Disponibles**&#10;1. **Pantalla Principal**: Navegación a todas las secciones&#10;2. **Agregar Producto**: Formulario completo con validaciones&#10;3. **Lista de Productos**: Visualización con imágenes y sincronización&#10;4. **Carrito**: Gestión completa de productos seleccionados&#10;5. **Checkout**: Proceso de compra paso a paso&#10;6. **Recibo**: Confirmación detallada de la orden&#10;&#10;##  Integración con API&#10;&#10;### **FakeStore API**&#10;- **Base URL**: `https://fakestoreapi.com/`&#10;- **Endpoints utilizados**:&#10;  - `GET /products` - Obtener todos los productos&#10;  - `GET /products/{id}` - Obtener producto específico&#10;  - `POST /products` - Crear nuevo producto&#10;  - `PUT /products/{id}` - Actualizar producto&#10;  - `DELETE /products/{id}` - Eliminar producto&#10;&#10;### **Sincronización**&#10;- **Automática** al abrir la lista de productos&#10;- **Manual** mediante botón de sincronización&#10;- **Offline-first** con Room como fuente de verdad&#10;- **Manejo de errores** con feedback al usuario&#10;&#10;##  Características de Calidad&#10;&#10;### **Rendimiento**&#10;- ✅ **Operaciones asíncronas** con Coroutines&#10;- ✅ **Carga de imágenes optimizada** con Glide&#10;- ✅ **Consultas eficientes** con Room&#10;- ✅ **Recycling de vistas** en listas&#10;&#10;### **Usabilidad**&#10;- ✅ **Interfaz intuitiva** y consistente&#10;- ✅ **Feedback inmediato** con Toast/Snackbar&#10;- ✅ **Navegación fluida** entre pantallas&#10;- ✅ **Validación de formularios** en tiempo real&#10;&#10;### **Robustez**&#10;- ✅ **Manejo de errores** completo&#10;- ✅ **Persistencia offline** confiable&#10;- ✅ **Validación de datos** en múltiples capas&#10;- ✅ **Recuperación automática** de errores de red&#10;&#10;##  Control de Versiones&#10;&#10;### **Configuración Git**&#10;```bash&#10;# Inicializar repositorio&#10;git init&#10;&#10;# Agregar archivos&#10;git add .&#10;&#10;# Commit inicial&#10;git commit -m &quot;Initial commit: ProductApp - Aplicación completa de gestión de productos&quot;&#10;&#10;# Conectar con repositorio remoto&#10;git remote add origin https://github.com/tu-usuario/ProductApp.git&#10;&#10;# Subir al repositorio&#10;git push -u origin main&#10;```&#10;&#10;### **Estructura de Commits Recomendada**&#10;- `feat:` - Nueva funcionalidad&#10;- `fix:` - Corrección de bugs&#10;- `docs:` - Actualización de documentación&#10;- `style:` - Cambios de formato/estilo&#10;- `refactor:` - Refactorización de código&#10;&#10;---&#10;&#10;##  Información del Proyecto&#10;&#10;**Desarrollado por**: Estudiante de Cibertec - Desarrollo de Aplicaciones Móviles I  &#10;**Tecnología**: Android nativo con Kotlin  &#10;**Fecha**: 2024  &#10;**Estado**: Completamente funcional y listo para presentación&#10;&#10;---&#10;&#10;###  **Proyecto optimizado para presentación académica y demostración de competencias en desarrollo Android**&#10;&#10;##  Licencia&#10;&#10;Este proyecto fue desarrollado con fines educativos para el curso de Desarrollo de Aplicaciones Móviles I en Cibertec.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/SUBIR_A_GIT.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SUBIR_A_GIT.bat" />
              <option name="updatedContent" value="@echo off&#10;color 0B&#10;echo.&#10;echo ═══════════════════════════════════════════════════════════════════&#10;echo     SUBIR PROYECTO A GIT - CONFIGURACION AUTOMATICA&#10;echo ═══════════════════════════════════════════════════════════════════&#10;echo.&#10;echo Este script te ayudará a subir el proyecto ProductApp a tu repositorio Git.&#10;echo Asegúrate de tener Git instalado y una cuenta en GitHub/GitLab.&#10;echo.&#10;&#10;echo [PASO 1] Verificando Git...&#10;git --version &gt;nul 2&gt;&amp;1&#10;if %ERRORLEVEL% NEQ 0 (&#10;    echo ❌ Git no está instalado o no está en el PATH&#10;    echo    Descarga Git desde: https://git-scm.com/downloads&#10;    echo    Instálalo y vuelve a ejecutar este script&#10;    pause&#10;    exit /b 1&#10;) else (&#10;    echo ✅ Git encontrado&#10;)&#10;&#10;echo.&#10;echo [PASO 2] Configuración inicial de Git...&#10;echo Configurando usuario de Git (si no está configurado)&#10;&#10;git config --global user.name &gt;nul 2&gt;&amp;1&#10;if %ERRORLEVEL% NEQ 0 (&#10;    set /p git_name=&quot;Ingresa tu nombre completo: &quot;&#10;    git config --global user.name &quot;%git_name%&quot;&#10;)&#10;&#10;git config --global user.email &gt;nul 2&gt;&amp;1  &#10;if %ERRORLEVEL% NEQ 0 (&#10;    set /p git_email=&quot;Ingresa tu email: &quot;&#10;    git config --global user.email &quot;%git_email%&quot;&#10;)&#10;&#10;echo ✅ Usuario configurado:&#10;git config --global user.name&#10;git config --global user.email&#10;&#10;echo.&#10;echo [PASO 3] Inicializando repositorio...&#10;if exist &quot;.git&quot; (&#10;    echo ✅ Repositorio Git ya existe&#10;) else (&#10;    git init&#10;    echo ✅ Repositorio Git inicializado&#10;)&#10;&#10;echo.&#10;echo [PASO 4] Agregando archivos al repositorio...&#10;git add .&#10;if %ERRORLEVEL% EQU 0 (&#10;    echo ✅ Archivos agregados correctamente&#10;) else (&#10;    echo ❌ Error al agregar archivos&#10;    pause&#10;    exit /b 1&#10;)&#10;&#10;echo.&#10;echo [PASO 5] Realizando commit inicial...&#10;git commit -m &quot;Initial commit: ProductApp - Aplicación completa de gestión de productos con carrito y checkout&quot;&#10;if %ERRORLEVEL% EQU 0 (&#10;    echo ✅ Commit inicial realizado&#10;) else (&#10;    echo ✅ Archivos ya están en el último commit&#10;)&#10;&#10;echo.&#10;echo ═══════════════════════════════════════════════════════════════════&#10;echo     CONFIGURACION DE REPOSITORIO REMOTO&#10;echo ═══════════════════════════════════════════════════════════════════&#10;echo.&#10;echo OPCIONES:&#10;echo [1] GitHub (github.com)&#10;echo [2] GitLab (gitlab.com)  &#10;echo [3] Bitbucket (bitbucket.org)&#10;echo [4] Otro servicio&#10;echo [5] Solo local (sin repositorio remoto)&#10;echo.&#10;set /p git_option=&quot;Selecciona una opción (1-5): &quot;&#10;&#10;if &quot;%git_option%&quot;==&quot;1&quot; (&#10;    set git_service=GitHub&#10;    set git_base=https://github.com&#10;    echo.&#10;    echo INSTRUCCIONES PARA GITHUB:&#10;    echo 1. Ve a https://github.com/new&#10;    echo 2. Crea un repositorio llamado &quot;ProductApp&quot; &#10;    echo 3. NO inicialices con README ^(ya tienes uno^)&#10;    echo 4. Copia la URL del repositorio&#10;    echo.&#10;) else if &quot;%git_option%&quot;==&quot;2&quot; (&#10;    set git_service=GitLab&#10;    set git_base=https://gitlab.com&#10;    echo.&#10;    echo INSTRUCCIONES PARA GITLAB:&#10;    echo 1. Ve a https://gitlab.com/projects/new&#10;    echo 2. Crea un repositorio llamado &quot;ProductApp&quot;&#10;    echo 3. NO inicialices con README ^(ya tienes uno^)&#10;    echo 4. Copia la URL del repositorio&#10;    echo.&#10;) else if &quot;%git_option%&quot;==&quot;3&quot; (&#10;    set git_service=Bitbucket&#10;    set git_base=https://bitbucket.org&#10;    echo.&#10;    echo INSTRUCCIONES PARA BITBUCKET:&#10;    echo 1. Ve a https://bitbucket.org/repo/create&#10;    echo 2. Crea un repositorio llamado &quot;ProductApp&quot;&#10;    echo 3. NO inicialices con README ^(ya tienes uno^)&#10;    echo 4. Copia la URL del repositorio&#10;    echo.&#10;) else if &quot;%git_option%&quot;==&quot;5&quot; (&#10;    echo.&#10;    echo ✅ Repositorio configurado solo en local&#10;    echo Tu proyecto está listo para desarrollo local con Git.&#10;    echo Puedes agregarlo a un servicio remoto más tarde con:&#10;    echo git remote add origin [URL_DEL_REPOSITORIO]&#10;    echo git push -u origin main&#10;    goto :end&#10;) else (&#10;    echo.&#10;    set /p git_base=&quot;Ingresa la URL base de tu servicio Git: &quot;&#10;)&#10;&#10;if not &quot;%git_option%&quot;==&quot;5&quot; (&#10;    echo.&#10;    set /p repo_url=&quot;Pega la URL completa de tu repositorio: &quot;&#10;    &#10;    echo.&#10;    echo [PASO 6] Conectando con repositorio remoto...&#10;    git remote add origin &quot;%repo_url%&quot; 2&gt;nul&#10;    if %ERRORLEVEL% EQU 0 (&#10;        echo ✅ Repositorio remoto agregado&#10;    ) else (&#10;        echo ⚠️  Repositorio remoto ya existe, actualizando...&#10;        git remote set-url origin &quot;%repo_url%&quot;&#10;    )&#10;    &#10;    echo.&#10;    echo [PASO 7] Subiendo proyecto al repositorio...&#10;    echo Esto puede tomar unos minutos dependiendo del tamaño del proyecto...&#10;    &#10;    git branch -M main 2&gt;nul&#10;    git push -u origin main&#10;    &#10;    if %ERRORLEVEL% EQU 0 (&#10;        echo.&#10;        echo ═══════════════════════════════════════════════════════════════════&#10;        echo     PROYECTO SUBIDO EXITOSAMENTE!&#10;        echo ═══════════════════════════════════════════════════════════════════&#10;        echo.&#10;        echo ✅ Tu proyecto ProductApp está ahora en: %repo_url%&#10;        echo.&#10;        echo PRÓXIMOS PASOS RECOMENDADOS:&#10;        echo • Verifica que todos los archivos estén en el repositorio&#10;        echo • Configura la descripción del repositorio&#10;        echo • Agrega topics/tags: android, kotlin, mobile-app, cibertec&#10;        echo • Considera hacer el repositorio público para portafolio&#10;        echo.&#10;        echo COMANDOS ÚTILES PARA EL FUTURO:&#10;        echo git add .                     # Agregar cambios&#10;        echo git commit -m &quot;mensaje&quot;       # Guardar cambios&#10;        echo git push                      # Subir cambios&#10;        echo git pull                      # Descargar cambios&#10;        echo.&#10;    ) else (&#10;        echo.&#10;        echo ❌ Error al subir el proyecto&#10;        echo.&#10;        echo POSIBLES SOLUCIONES:&#10;        echo 1. Verifica tu conexión a internet&#10;        echo 2. Confirma que la URL del repositorio sea correcta&#10;        echo 3. Asegúrate de tener permisos en el repositorio&#10;        echo 4. Si es un repositorio privado, configura autenticación&#10;        echo.&#10;        echo Puedes intentar manualmente con:&#10;        echo git push -u origin main --force&#10;    )&#10;)&#10;&#10;:end&#10;echo.&#10;echo ═══════════════════════════════════════════════════════════════════&#10;echo     RESUMEN DEL PROYECTO SUBIDO&#10;echo ═══════════════════════════════════════════════════════════════════&#10;echo.&#10;echo PROYECTO: ProductApp - Aplicación de Gestión de Productos&#10;echo TECNOLOGÍA: Android + Kotlin + Room + Retrofit&#10;echo FUNCIONALIDADES:&#10;echo • ✅ Gestión completa de productos (CRUD)&#10;echo • ✅ Carrito de compras funcional&#10;echo • ✅ Proceso de checkout con recibo&#10;echo • ✅ Sincronización con FakeStore API&#10;echo • ✅ Base de datos Room local&#10;echo • ✅ Material Design 3&#10;echo • ✅ Arquitectura MVVM&#10;echo.&#10;echo ARCHIVOS INCLUIDOS:&#10;echo • ✅ Código fuente completo&#10;echo • ✅ README.md profesional&#10;echo • ✅ .gitignore configurado&#10;echo • ✅ Documentación técnica&#10;echo.&#10;echo  Ideal para portafolio académico y profesional!&#10;echo.&#10;pause" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>